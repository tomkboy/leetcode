Enter file contents here
// binary tree level order travesal.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include<vector>
#include<iostream>
#include<queue>
using namespace std;

struct treenode{
	int val;
	treenode* left;
	treenode* right;
	treenode(int x):val(x),left(NULL),right(NULL){}
};

vector<vector<int> > levelorder(treenode* root)
{
	queue<treenode*> que;
	vector<int> vec;
	vector<vector<int> > res;
	que.push(root);
	que.push(NULL);
	while(!que.empty())
	{
		treenode* temp=que.front();
		que.pop();
		if(temp!=NULL)
		{
			vec.push_back(temp->val);

			treenode* l=temp->left;
			treenode* r=temp->right;
			/*if(!l)
				que.push(l);
			if(!r)
				que.push(r);*/
			if(l)
				que.push(l);
			if(r)
				que.push(r);
		}
		else
		{
			res.push_back(vec);
			if(!que.empty())
			{
				vec.clear();
				que.push(NULL);
			}
		}
	}
	return res;
}

int main()
{
	treenode* root=new treenode(5);
	root->left=new treenode(4);
	root->left->left=new treenode(11);
	root->left->left->left=new treenode(7);
	root->left->left->right=new treenode(2);
	root->right=new treenode(8);
	root->right->left=new treenode(13);
	root->right->right=new treenode(4);
	root->right->right->left=new treenode(5);
	root->right->right->right=new treenode(1);
	vector<vector<int> > result;
	result=levelorder(root);
	int len=result.size();
	for(int i=0;i<len;i++)
	{
		int temp=result[i].size();
		for(int j=0;j<temp;j++)
		{
			cout<<result[i][j]<<",";
		}
		cout<<endl;
	}

}
int _tmain(int argc, _TCHAR* argv[])
{
	return 0;
}

